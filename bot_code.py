from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler
from telegram.ext.filters import Text, COMMAND
from telegram import ReplyKeyboardMarkup, KeyboardButton
from sheets_code import add_article, add_goal, get_articles, get_goals, clear_sheet
import os

def run():
    app = Application.builder().token("7281433062:AAGozy3VnJ-o7IxUjO16rWOgJLLXw-K-OMM").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(MessageHandler(Text() & ~COMMAND, handle_message))
    webhook_url = "https://balcheg-bot-1.onrender.com/telegram"
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        url_path="telegram",
        webhook_url=webhook_url
    )
    app.run_forever()

async def start(update, context):
    keyboard = [["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é", "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"], ["üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—å–∏", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"], ["üßº –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç—å–∏", "üßº –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def menu(update, context):
    await start(update, context)

async def handle_message(update, context):
    message = update.message.text
    username = update.message.from_user.username or update.message.from_user.first_name
    try:
        if 'action' in context.user_data:
            if context.user_data['action'] == 'add_article':
                add_article(message, username)
                await update.message.reply_text("‚úÖ –°—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            elif context.user_data['action'] == 'add_task':
                add_goal(message, username)
                await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            context.user_data.clear()
        else:
            if message == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é":
                context.user_data['action'] = 'add_article'
                await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:")
            elif message == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
                context.user_data['action'] = 'add_task'
                await update.message.reply_text("‚úÖ –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
            elif message == "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—å–∏":
                articles = get_articles()
                if articles:
                    response = "\n".join([f"{row[0]}: {row[1]} (–¥–æ–±–∞–≤–∏–ª: {row[2]})" for row in articles if len(row) >= 3])
                    await update.message.reply_text(f"üìñ –°—Ç–∞—Ç—å–∏:\n{response}")
                else:
                    await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π.")
            elif message == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏":
                tasks = get_goals()
                if tasks:
                    response = "\n".join([f"{row[0]}: {row[1]} (–¥–æ–±–∞–≤–∏–ª: {row[2]})" for row in tasks if len(row) >= 3])
                    await update.message.reply_text(f"üìã –ó–∞–¥–∞—á–∏:\n{response}")
                else:
                    await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
            elif message == "üßº –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç—å–∏":
                clear_sheet('Articles')
                await update.message.reply_text("üßº –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –æ—á–∏—â–µ–Ω.")
            elif message == "üßº –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏":
                clear_sheet('Goals')
                await update.message.reply_text("üßº –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω.")
            else:
                await update.message.reply_text("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    run()